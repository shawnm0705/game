{"version":3,"sources":["./src/app/davinci-code/davinci-code-card/davinci-code-card.component.html","./src/app/davinci-code/davinci-code.component.html","./src/app/room/room.component.html","./src/app/davinci-code/davinci-code-card/davinci-code-card.component.scss","./src/app/davinci-code/davinci-code-card/davinci-code-card.component.ts","./src/app/davinci-code/davinci-code.component.scss","./src/app/davinci-code/davinci-code.component.ts","./src/app/game/game-routing.module.ts","./src/app/game/game.module.ts","./src/app/room/room.component.scss","./src/app/room/room.component.ts"],"names":[],"mappings":"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","file":"game-game-module-es2015.js","sourcesContent":["export default \"<div class=\\\"text-center\\\">\\n  <div *ngIf=\\\"!placeholder\\\" class=\\\"card mb-1\\\" [ngClass]=\\\"{'selected': selected, 'black': color === 'black'}\\\">{{ content }}</div>\\n  <div *ngIf=\\\"placeholder\\\" class=\\\"card mb-1 placeholder\\\" [ngClass]=\\\"{'selected': selected}\\\">{{ content }}</div>\\n  <p>{{ mark }}<ng-container *ngIf=\\\"opened\\\"><fa-icon icon=\\\"eye\\\" class=\\\"text-info ml-1\\\"></fa-icon></ng-container></p>\\n</div>\"","export default \"<div *ngIf=\\\"!isPrepared\\\" class=\\\"text-center\\\">\\n  <h2 class=\\\"mt-3 mb-5\\\">{{ utils.lang('Pick') }} {{ initCardCount() }} {{ utils.lang('cards') }}</h2>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div *ngFor=\\\"let n of [1,2,3,4]\\\" class=\\\"col-3\\\">\\n        <app-davinci-code-card\\n          color=\\\"black\\\"\\n          [selected]=\\\"initialCards.includes(n)\\\"\\n          (click)=\\\"selectInitialCard(n)\\\"\\n          ></app-davinci-code-card>\\n      </div>\\n    </div>\\n    <div class=\\\"row my-5\\\">\\n      <div *ngFor=\\\"let n of [5,6,7,8]\\\" class=\\\"col-3\\\">\\n        <app-davinci-code-card\\n          color=\\\"white\\\"\\n          [selected]=\\\"initialCards.includes(n)\\\"\\n          (click)=\\\"selectInitialCard(n)\\\"\\n          ></app-davinci-code-card>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <button class=\\\"btn btn-primary\\\" [disabled]=\\\"initialCards.length !== initCardCount()\\\" (click)=\\\"prepared()\\\">{{ utils.lang('OK') }}</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<ng-container *ngIf=\\\"isPrepared\\\">\\n  <div class=\\\"text-center\\\">\\n    <h2 class=\\\"mt-3\\\">\\n      <ng-container *ngIf=\\\"isMyTurn()\\\">\\n        <ng-container *ngIf=\\\"!gameData.currentTurn.gameEnds\\\">{{ utils.lang('My Turn') }}!</ng-container>\\n        <ng-container *ngIf=\\\"gameData.currentTurn.gameEnds\\\">{{ utils.lang('I Win') }}!</ng-container>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"!isMyTurn()\\\">\\n        <ng-container *ngIf=\\\"!gameData.currentTurn.gameEnds\\\">{{ utils.lang('Waiting For Others') }} <fa-icon icon=\\\"cog\\\" spin=\\\"true\\\"></fa-icon></ng-container>\\n        <ng-container *ngIf=\\\"gameData.currentTurn.gameEnds\\\">{{ utils.lang('Game Over') }}!</ng-container></ng-container>\\n    </h2>\\n    <p *ngIf=\\\"instruction()\\\" class=\\\"text-primary\\\">* {{ instruction() }}</p>\\n  </div>\\n\\n  <div *ngFor=\\\"let member of gameData.members\\\" class=\\\"px-3 pb-2\\\">\\n    <div class=\\\"container card p-2\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <fa-icon icon=\\\"user-alt\\\" class=\\\"text-info mr-2\\\"></fa-icon>\\n          <span *ngIf=\\\"member.id !== p2p.getId()\\\">{{ member.name }}</span>\\n          <ng-container *ngIf=\\\"member.id === p2p.getId()\\\">\\n            <span>{{ utils.lang('My Cards') }}</span>\\n            <app-davinci-code-card\\n              *ngIf=\\\"isGuessingCard()\\\"\\n              [color]=\\\"gameData.currentTurn.newCard.color\\\"\\n              [mark]=\\\"gameData.currentTurn.newCard.mark\\\"\\n              [content]=\\\"gameData.currentTurn.newCard.content\\\"\\n              ></app-davinci-code-card>\\n            <button *ngIf=\\\"gameData.currentTurn.guessCorrectly &&\\n              isMyTurn() &&\\n              !gameData.currentTurn.gameEnds &&\\n              !me().cardWaitingForConfirm\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"skipTurn()\\\">{{ utils.lang('Pass this turn') }}</button>\\n          </ng-container>\\n        </div>\\n      </div>\\n\\n      <div *ngIf=\\\"member.cards && (member.id === p2p.getId() || !member.cardWaitingForConfirm)\\\" class=\\\"row row-cards mt-2 px-2\\\">\\n        <ng-container *ngFor=\\\"let card of member.cards; let i = index\\\">\\n          <div *ngIf=\\\"showPlaceholderBeforeCard(member, i)\\\" class=\\\"col-2\\\">\\n            <app-davinci-code-card placeholder=true (click)=\\\"reorderCardToIndex(i)\\\"></app-davinci-code-card>\\n          </div>\\n          <div class=\\\"col-2\\\">\\n            <app-davinci-code-card\\n              [color]=\\\"card.color\\\"\\n              [mark]=\\\"card.mark\\\"\\n              [content]=\\\"member.id === p2p.getId() || card.opened ? card.content : ''\\\"\\n              [opened]=\\\"card.opened\\\"\\n              (click)=\\\"member.id !== p2p.getId() ? selectCardForGuessing(card) : null\\\"\\n              [selected]=\\\"guessCardMark === card.mark\\\"\\n              ></app-davinci-code-card>\\n          </div>\\n        </ng-container>\\n        <div *ngIf=\\\"showPlaceholderAtLast(member)\\\" class=\\\"col-2\\\">\\n          <app-davinci-code-card placeholder=true (click)=\\\"reorderCardToIndex(member.cards.length)\\\"></app-davinci-code-card>\\n        </div>\\n      </div>\\n\\n      <ng-container *ngIf=\\\"isGuessingCardOfMember(member)\\\">\\n        <div class=\\\"row row-cards px-2\\\">\\n          <div *ngFor=\\\"let content of CARDS\\\" class=\\\"col-2\\\">\\n            <app-davinci-code-card\\n              placeholder=true\\n              [content]=\\\"content\\\"\\n              (click)=\\\"!isWaitingForResponse() ? guessAs = content : null\\\"\\n              [selected]=\\\"guessAs === content\\\"\\n              ></app-davinci-code-card>\\n          </div>\\n        </div>\\n        <div class=\\\"row text-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <button class=\\\"btn btn-primary\\\" [disabled]=\\\"[undefined, null].includes(guessAs) || isWaitingForResponse()\\\" (click)=\\\"guessConfirmed()\\\">{{ utils.lang('OK') }}</button>\\n          </div>\\n        </div>\\n      </ng-container>\\n\\n      <div *ngIf=\\\"member.id === p2p.getId() && member.cardWaitingForConfirm\\\" class=\\\"row text-center\\\">\\n        <div class=\\\"col-12\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"cardConfirmed()\\\">{{ utils.lang('OK') }}</button>\\n        </div>\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n  <div class=\\\"px-3 pb-2\\\">\\n    <div class=\\\"container card p-2\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <fa-icon icon=\\\"th-large\\\" class=\\\"text-info mr-2\\\"></fa-icon>\\n          {{ utils.lang('Card Deck') }}\\n        </div>\\n      </div>\\n      <div class=\\\"row row-cards my-3 px-2\\\">\\n        <div *ngFor=\\\"let card of gameData.deck.black; let i = index\\\" class=\\\"col-2\\\">\\n          <app-davinci-code-card\\n            [color]=\\\"card.color\\\"\\n            [selected]=\\\"selectedCardFromDeckIndex === i\\\"\\n            (click)=\\\"selectCardFromDeck(i)\\\"\\n            ></app-davinci-code-card>\\n        </div>\\n        <div *ngFor=\\\"let card of gameData.deck.white; let i = index\\\" class=\\\"col-2\\\">\\n          <app-davinci-code-card\\n            [color]=\\\"card.color\\\"\\n            [selected]=\\\"selectedCardFromDeckIndex === i + gameData.deck.black.length\\\"\\n            (click)=\\\"selectCardFromDeck(i + gameData.deck.black.length)\\\"\\n            ></app-davinci-code-card>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"isSelectingCardFromDeck()\\\" class=\\\"row text-center\\\">\\n        <div class=\\\"col-12\\\">\\n          <button class=\\\"btn btn-primary\\\" [disabled]=\\\"selectedCardFromDeckIndex === null || selectedCardFromDeckConfirming\\\" (click)=\\\"cardFromDeckConfirmed()\\\">{{ utils.lang('OK') }}</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"p-3\\\">\\n    <div class=\\\"card p-2\\\">\\n      <b>{{ utils.lang('History') }}</b>\\n      <p *ngFor=\\\"let record of gameData.history; let i = index\\\">\\n        <ng-container *ngIf=\\\"record.guessAs === undefined\\\">\\n          <hr>\\n          {{ record.name }} {{ utils.lang('get card') }}\\n          <span class=\\\"text-info\\\">{{ record.cardMark }}</span>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"record.guessAs !== undefined\\\">\\n          {{ record.name }} {{ utils.lang('guess card') }}\\n          <span class=\\\"text-info\\\">{{ record.cardMark }}</span>\\n          {{ utils.lang('as') }}\\n          <span class=\\\"text-info\\\">{{ record.guessAs }}</span>\\n          <fa-icon *ngIf=\\\"record.result\\\" icon=\\\"check\\\" class=\\\"text-success ml-2\\\"></fa-icon>\\n          <fa-icon *ngIf=\\\"!record.result\\\" icon=\\\"times\\\" class=\\\"text-danger ml-2\\\"></fa-icon>\\n        </ng-container>\\n      </p>\\n    </div>\\n  </div>\\n\\n</ng-container>\\n<div class=\\\"text-center mt-4\\\">\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"next()\\\">下一步</button>\\n</div>\\n\\n\\n\"","export default \"<div class=\\\"m-3\\\">\\n  <button class=\\\"border-0 bg-transparent text-primary\\\" (click)=\\\"back()\\\"><fa-icon icon=\\\"arrow-left\\\"></fa-icon></button>\\n  <h2 class=\\\"text-center\\\">{{ utils.lang(games[game].name) }}</h2>\\n</div>\\n\\n<div class=\\\"container text-center mt-3\\\">\\n\\n  <ng-container *ngIf=\\\"!storage.get('name')\\\">\\n    <label>{{ utils.lang('Nick Name') }}:</label>\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"name\\\" class=\\\"mx-2\\\">\\n    <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"saveName()\\\">{{ utils.lang('OK') }}</button>\\n  </ng-container>\\n\\n  <ng-container *ngIf=\\\"storage.get('name')\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12 mb-3\\\">\\n        {{ utils.lang('Hello') }}<button class=\\\"btn btn-link\\\" (click)=\\\"storage.remove('name')\\\">{{ storage.get('name') }}</button>\\n      </div>\\n      <div class=\\\"col-6 text-right\\\">\\n        <button class=\\\"btn btn-lg\\\" [ngClass]=\\\"{'btn-outline-primary': !storage.isHost(), 'btn-primary': storage.isHost()}\\\" (click)=\\\"storage.isHost(true)\\\">{{ utils.lang('Create Room') }}</button>\\n      </div>\\n      <div class=\\\"col-6 text-left\\\">\\n        <button class=\\\"btn btn-lg\\\" [ngClass]=\\\"{'btn-outline-primary': storage.isHost(), 'btn-primary': !storage.isHost()}\\\" (click)=\\\"storage.isHost(false)\\\">{{ utils.lang('Join Room') }}</button>\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\\"storage.isHost()\\\" class=\\\"row mt-3\\\">\\n      <div class=\\\"col-12 text-left\\\">\\n        <p>{{ utils.lang('My Room Id') }}: <span class=\\\"text-info\\\">{{ p2p.getId() }}</span></p>\\n        <p>{{ utils.lang('People In The Room') }}: ({{ games[game].min }} - {{ games[game].max }} {{ utils.lang('people') }})</p>\\n        <ul class=\\\"list-group mt-2\\\">\\n          <li *ngFor=\\\"let member of roomMembers\\\" class=\\\"list-group-item\\\"><fa-icon icon=\\\"user-alt\\\" class=\\\"text-info mr-2\\\"></fa-icon>{{ member }}</li>\\n        </ul>\\n      </div>\\n      <div class=\\\"col-12 text-center mt-2\\\">\\n        <button class=\\\"btn btn-success\\\" [disabled]=\\\"roomMembers.length < games[game].min || roomMembers.length > games[game].max\\\" (click)=\\\"start()\\\">{{ utils.lang('Start Game') }}</button>\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\\"!storage.isHost()\\\" class=\\\"row mt-3\\\">\\n      <div *ngIf=\\\"roomMembers.length <= 1\\\" class=\\\"col-12\\\">\\n        <label>{{ utils.lang('Room Number') }}:</label>\\n        <input type=\\\"text\\\" [(ngModel)]=\\\"roomId\\\" class=\\\"mx-2\\\" style=\\\"width: 150px\\\">\\n        <button class=\\\"btn btn-success btn-sm\\\" [disabled]=\\\"joiningRoom\\\" (click)=\\\"join()\\\">{{ utils.lang('Join') }}</button>\\n      </div>\\n      <div *ngIf=\\\"roomMembers.length > 1\\\" class=\\\"col-12 text-left\\\">\\n        <p>{{ utils.lang('People In The Room') }}: ({{ games[game].min }} - {{ games[game].max }} {{ utils.lang('people') }})</p>\\n        <ul class=\\\"list-group mt-2\\\">\\n          <li *ngFor=\\\"let member of roomMembers\\\" class=\\\"list-group-item\\\"><fa-icon icon=\\\"user-alt\\\" class=\\\"text-info mr-2\\\"></fa-icon>{{ member }}</li>\\n        </ul>\\n      </div>\\n    </div>\\n\\n  </ng-container>\\n\\n</div>\\n\"","export default \".card {\\n  width: 40px;\\n  height: 50px;\\n  font-size: 25px;\\n  margin: auto;\\n  border-width: 3px;\\n  color: black;\\n  background: white;\\n}\\n\\n.placeholder {\\n  border: 2px dashed var(--orange);\\n}\\n\\n.black {\\n  color: white;\\n  background: black;\\n}\\n\\n.selected {\\n  -webkit-transform: scale(1.3);\\n          transform: scale(1.3);\\n}\\n\\np {\\n  margin-bottom: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaGF3bi9XZWJzaXRlcy9nYW1lL3NyYy9hcHAvZGF2aW5jaS1jb2RlL2RhdmluY2ktY29kZS1jYXJkL2RhdmluY2ktY29kZS1jYXJkLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9kYXZpbmNpLWNvZGUvZGF2aW5jaS1jb2RlLWNhcmQvZGF2aW5jaS1jb2RlLWNhcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7QUNDRjs7QURDQTtFQUNFLGdDQUFBO0FDRUY7O0FEQUE7RUFDRSxZQUFBO0VBQ0EsaUJBQUE7QUNHRjs7QUREQTtFQUNFLDZCQUFBO1VBQUEscUJBQUE7QUNJRjs7QURGQTtFQUNFLGdCQUFBO0FDS0YiLCJmaWxlIjoic3JjL2FwcC9kYXZpbmNpLWNvZGUvZGF2aW5jaS1jb2RlLWNhcmQvZGF2aW5jaS1jb2RlLWNhcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZCB7XG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDUwcHg7XG4gIGZvbnQtc2l6ZTogMjVweDtcbiAgbWFyZ2luOiBhdXRvO1xuICBib3JkZXItd2lkdGg6IDNweDtcbiAgY29sb3I6IGJsYWNrO1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbn1cbi5wbGFjZWhvbGRlciB7XG4gIGJvcmRlcjogMnB4IGRhc2hlZCB2YXIoLS1vcmFuZ2UpO1xufVxuLmJsYWNrIHtcbiAgY29sb3I6IHdoaXRlO1xuICBiYWNrZ3JvdW5kOiBibGFjaztcbn1cbi5zZWxlY3RlZCB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMS4zKTtcbn1cbnAge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufSIsIi5jYXJkIHtcbiAgd2lkdGg6IDQwcHg7XG4gIGhlaWdodDogNTBweDtcbiAgZm9udC1zaXplOiAyNXB4O1xuICBtYXJnaW46IGF1dG87XG4gIGJvcmRlci13aWR0aDogM3B4O1xuICBjb2xvcjogYmxhY2s7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xufVxuXG4ucGxhY2Vob2xkZXIge1xuICBib3JkZXI6IDJweCBkYXNoZWQgdmFyKC0tb3JhbmdlKTtcbn1cblxuLmJsYWNrIHtcbiAgY29sb3I6IHdoaXRlO1xuICBiYWNrZ3JvdW5kOiBibGFjaztcbn1cblxuLnNlbGVjdGVkIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xufVxuXG5wIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn0iXX0= */\"","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-davinci-code-card',\n  templateUrl: './davinci-code-card.component.html',\n  styleUrls: ['./davinci-code-card.component.scss']\n})\nexport class DavinciCodeCardComponent {\n  @Input() color = 'white';\n  @Input() content: string;\n  @Input() mark: string;\n  @Input() selected: boolean;\n  @Input() opened: boolean;\n  @Input() placeholder: boolean;\n\n  constructor() { }\n\n}\n","export default \".row-cards .col-2 {\\n  padding: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaGF3bi9XZWJzaXRlcy9nYW1lL3NyYy9hcHAvZGF2aW5jaS1jb2RlL2RhdmluY2ktY29kZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvZGF2aW5jaS1jb2RlL2RhdmluY2ktY29kZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQUNFLFlBQUE7QUNBSiIsImZpbGUiOiJzcmMvYXBwL2RhdmluY2ktY29kZS9kYXZpbmNpLWNvZGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucm93LWNhcmRzIHtcbiAgLmNvbC0yIHtcbiAgICBwYWRkaW5nOiA1cHg7XG4gIH1cbn0iLCIucm93LWNhcmRzIC5jb2wtMiB7XG4gIHBhZGRpbmc6IDVweDtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilsService} from '@services/utils.service';\nimport { StorageService } from '@services/storage.service';\nimport { P2PService } from '@services/p2p.service';\n\ninterface GameData {\n  members: Member[];\n  deck: {\n    black: Card[];\n    white: Card[];\n  }\n  currentTurn: {\n    memberIndex: number;\n    newCard: Card;\n    waitingForConfirmation: boolean;\n    guessCorrectly: boolean;\n    waitingForResponse: boolean;\n    gameEnds: boolean;\n  };\n  history: {\n    name: string;\n    cardMark: string;\n    guessAs?: string|number;\n    result?: boolean;\n  }[];\n}\n\ninterface Member {\n  id: string;\n  name: string;\n  cards: Card[];\n  cardWaitingForConfirm: Card;\n}\n\ninterface Card {\n  color: string;\n  mark: string;\n  content: string|number;\n  opened?: boolean;\n}\n\nconst MARKS = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'].reverse();\n\n@Component({\n  selector: 'app-davinci-code',\n  templateUrl: './davinci-code.component.html',\n  styleUrls: ['./davinci-code.component.scss']\n})\nexport class DavinciCodeComponent implements OnInit {\n  CARDS = [...Array(12).keys(), '-'];\n  // is the current user prepared to start\n  isPrepared = false;\n  initialCards = [];\n  gameData: GameData;\n  selectedCardFromDeckIndex: number = null;\n  selectedCardFromDeckConfirming: boolean;\n  guessCardMark: string;\n  guessAs: number | string = null;\n\n  constructor(\n    public utils: UtilsService,\n    public storage: StorageService,\n    private route: ActivatedRoute,\n    public p2p: P2PService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    if (this.storage.isHost()) {\n      // initialise game data\n      this.gameData = this.storage.getGameData();\n      this.gameData.deck = {\n        // black: this.utils.shuffle(this.CARDS).map((card, i) => {\n          black: this.CARDS.map((card, i) => {\n          return {\n            color: 'black',\n            content: card,\n            mark: MARKS[i],\n            opened: false\n          };\n        }),\n        white: this.utils.shuffle(this.CARDS).map((card, i) => {\n          return {\n            color: 'white',\n            content: card,\n            mark: MARKS[i + 13],\n            opened: false\n          };\n        })\n      };\n      this.gameData.history = [];\n      this.gameData.currentTurn = {\n        memberIndex: null,\n        newCard: null,\n        waitingForConfirmation: false,\n        guessCorrectly: null,\n        waitingForResponse: false,\n        gameEnds: false\n      }\n    }\n    this.utils.getEvent('game-data').subscribe(res => {\n      // member receive game data from host\n      if (!this.storage.isHost()) {\n        this.gameData = res;\n        return;\n      }\n\n      // host received data showing that a member has selected initial cards\n      if (this.utils.has(res, 'prepared') && res.prepared) {\n        return this.memberPrepared(res.id, res.cards);\n      }\n\n      // host received data showing that a member has confirmed on the position of joker card\n      if (this.utils.has(res, 'cardConfirmed') && res.cardConfirmed) {\n        const memberIndex = this.gameData.members.findIndex(m => m.id === res.id);\n        this.gameData.members[memberIndex].cards = res.cards;\n        this.nextTurn();\n        return this.p2p.send(this.gameData);\n      }\n\n      // host received data showing that a member has selected a card from deck\n      if (this.utils.has(res, 'selectCardFromDeck')) {\n        // member can only select a card from deck on his turn\n        if (this.gameData.members[this.gameData.currentTurn.memberIndex].id !== res.id) {\n          return;\n        }\n        return this.getNewCardFromDeck(res.selectCardFromDeck);\n      }\n\n      // host received data showing that a member has guessed a card\n      if (this.utils.has(res, 'guessCardMark')) {\n        // member can only guess card on his turn\n        if (this.gameData.members[this.gameData.currentTurn.memberIndex].id !== res.id) {\n          return;\n        }\n        return this.checkGuessResult(res.guessCardMark, res.guessAs);\n      }\n\n      if (this.utils.has(res, 'skipTurn') && res.skipTurn) {\n        // member can only skip turn on his turn\n        if (this.gameData.members[this.gameData.currentTurn.memberIndex].id !== res.id) {\n          return;\n        }\n        return this.memberSkipTurn();\n      }\n    });\n  }\n\n  /************************\n    Preparation\n  ************************/\n  // how many initial cards should everyone has\n  initCardCount(): number {\n    if (this.utils.isEmpty(this.storage.getGameData())) {\n      this.router.navigate(['room', 'davinci_code']);\n      return 4;\n    }\n    return this.storage.getGameData().members.length === 4 ? 3 : 4;\n  }\n\n  // when user select initial card\n  selectInitialCard(n): void {\n    if (this.initialCards.length === this.initCardCount() && !this.initialCards.includes(n)) {\n      return;\n    }\n    this.initialCards = this.utils.addOrRemove(this.initialCards, n);\n  }\n\n  // when user has confirmed on initial cards selection\n  prepared(): void {\n    if (this.storage.isHost()) {\n      this.memberPrepared(this.p2p.getId(), this.initialCards);\n    } else {\n      // send data to the host\n      this.p2p.send({\n        id: this.p2p.getId(),\n        prepared: true,\n        cards: this.initialCards\n      });\n    }\n    this.isPrepared = true;\n  }\n\n  /**\n   * (HOST ONLY)\n   * when host received data that a member has selected initial cards\n   * @param id    Member's id\n   * @param cards Card array in numbers (1 - 4 means black, 5 - 8 means white)\n   */\n  memberPrepared(id: string, cards: number[]): void {\n    // find the member\n    const memberIndex = this.gameData.members.findIndex(m => m.id === id);\n    const member = this.gameData.members[memberIndex];\n    member.cards = [];\n    member.cardWaitingForConfirm = null;\n    cards.forEach(initCard => {\n      let card = initCard < 5 ? this.gameData.deck.black.pop() : this.gameData.deck.white.pop();\n      // don't allow having two joker cards as initial card\n      if (member.cards.find(c => c.content === '-') && card.content === '-') {\n        const tmpCard = JSON.parse(JSON.stringify(card));\n        if (initCard < 5) {\n          card = this.gameData.deck.black.pop();\n          this.gameData.deck.black.push(tmpCard);\n        } else {\n          card = this.gameData.deck.white.pop();\n          this.gameData.deck.white.push(tmpCard);\n        }\n      }\n      card.opened = false;\n      member.cards.push(card);\n      if (card.content === '-') {\n        member.cardWaitingForConfirm = card;\n      }\n    });\n    // sort the cards\n    member.cards.sort(this.sortCards);\n    this.gameData.members[memberIndex] = member;\n    this.nextTurn();\n    this.p2p.send(this.gameData);\n  }\n\n  /**\n   * (HOST ONLY)\n   * Sort the cards in order of number.\n   * Black is smaller than white if number is the same.\n   * Leave the Joker unchanged\n   */\n  sortCards(a, b): number {\n    // Move the Joker card to left\n    if (a.content === '-') {\n      return -1;\n    }\n    if (b.content === '-') {\n      return 1;\n    }\n    if (a.content < b.content) {\n      return -1;\n    }\n    if (a.content > b.content) {\n      return 1;\n    }\n    return a.color === 'black' ? -1 : 1;\n  }\n\n  me(): Member {\n    return this.gameData.members.find(m => m.id === this.p2p.getId());\n  }\n\n  /**\n   * when user reordered the Joker card\n   * @param i Reorder the Joker card to this index position\n   */\n  reorderCardToIndex(i: number): void {\n    const myIndex = this.gameData.members.findIndex(m => m.id === this.p2p.getId());\n    const cards = this.gameData.members[myIndex].cards;\n    const jokerCardIndex = cards.findIndex(c => c.mark === this.me().cardWaitingForConfirm.mark);\n    if (jokerCardIndex < i) {\n      i --;\n    }\n    cards.splice(i, 0, cards.splice(jokerCardIndex, 1)[0]);\n  }\n\n  /**\n   * when user confirmed the position of the joker card\n   */\n  cardConfirmed(): void {\n    const myIndex = this.gameData.members.findIndex(m => m.id === this.p2p.getId());\n    this.gameData.members[myIndex].cardWaitingForConfirm = null;\n    if (this.storage.isHost()) {\n      this.nextTurn();\n      return this.p2p.send(this.gameData);\n    }\n    return this.p2p.send({\n      id: this.p2p.getId(),\n      cardConfirmed: true,\n      cards: this.gameData.members[myIndex].cards\n    });\n  }\n\n  /**\n   * (HOST ONLY)\n   * Check if it is ready to proceed to the next turn.\n   * If it is, find the member to do the next turn\n   */\n  nextTurn(): void {\n    // not ready for the next turn if not all members are prepared and confirmed on cards\n    if (this.gameData.members.find(m => !this.utils.has(m, 'cards') || m.cardWaitingForConfirm)) {\n      return;\n    }\n    do {\n      if (this.gameData.currentTurn.memberIndex === null || this.gameData.currentTurn.memberIndex === this.gameData.members.length - 1) {\n        this.gameData.currentTurn.memberIndex = 0;\n      } else {\n        this.gameData.currentTurn.memberIndex ++;\n      }\n      // skip member whose cards are all opened\n    } while (!this.gameData.members[this.gameData.currentTurn.memberIndex].cards.find(c => !c.opened));\n\n    this.newTurnInit();\n    this.p2p.send(this.gameData);\n  }\n\n  newTurnInit() {\n    this.gameData.currentTurn.newCard = null;\n    this.gameData.currentTurn.waitingForConfirmation = false;\n    this.gameData.currentTurn.guessCorrectly = null;\n  }\n\n  isMyTurn(): boolean {\n    if (!this.utils.has(this.gameData, 'currentTurn') || this.gameData.currentTurn.memberIndex === null) {\n      return false;\n    }\n    return this.gameData.members[this.gameData.currentTurn.memberIndex].id === this.p2p.getId();\n  }\n\n  instruction(): string {\n    if (this.me().cardWaitingForConfirm)  {\n      return this.utils.lang('Please adjust the position of \"-\" card');\n    }\n    if (this.isSelectingCardFromDeck()) {\n      return this.utils.lang('Please choose a card from the card deck');\n    }\n    if (this.isGuessingCard() && !this.gameData.currentTurn.gameEnds) {\n      let msg = this.utils.lang('Please choose a card from other people and guess');\n      if (this.gameData.currentTurn.guessCorrectly) {\n        msg += ', ' + this.utils.lang('or skip this turn');\n      }\n      return msg;\n    }\n    if (this.isWaitingForResponse()) {\n      return this.utils.lang('Please wait for the response of the system');\n    }\n    return '';\n  }\n\n  /**\n   * The following functions determine whether a placeholder card should be placed before the current card in the loop.\n   * The placeholder card is used when user need to confirm on the position of a card\n   *\n   * e.g.\n   * 1. When user need to put the Joker in hand, he need to confirm on the position of the Joker. So the cards looks like: (\"#\" is the placeholder)\n   *     # 1 # 3 - 5 # 7 #    or\n   *     # 1 - 3 # 5 # 7 #    or\n   *     - 1 # 3 # 5 # 7 #\n   *\n   * 2. When user need to put card 5 in hand, he need to confirm the position only if there's a Joker next to card 5. So the cards looks like: (\"#\" is the placeholder)\n   *     1 3 # - 5 7    or\n   *     1 3 5 - # 7\n   *\n   * @param member The member object in the loop\n   * @param cardIndex The card index in the loop\n   */\n  showPlaceholderBeforeCard(member: Member, cardIndex: number): boolean {\n    // show placeholder only in \"my card\" area\n    if (member.id !== this.p2p.getId()) {\n      return false;\n    }\n    // show placeholder only when I have card waiting for confirmation\n    if (!this.me().cardWaitingForConfirm) {\n      return false;\n    }\n    // don't need to show placeholder if the current card is the card that needs confirmation\n    if (member.cards[cardIndex].mark === this.me().cardWaitingForConfirm.mark) {\n      return false;\n    }\n    // don't need to show placeholder if the card that needs confirmation is just on the left of the current card\n    // e.g.  the card needs confirmation is '-', the current card is '3'\n    //       # 1 - 3 # 5 # 7 #\n    if (cardIndex !== 0 && member.cards[cardIndex - 1].mark === this.me().cardWaitingForConfirm.mark) {\n      return false;\n    }\n    // if the card that needs confirmation is the Joker, show placeholder everywhere\n    if (this.me().cardWaitingForConfirm.content === '-') {\n      return true;\n    }\n    // if the card that needs confirmation is not the Joker, show placeholder if the current card is Joker, and the next card is the card needs confirmation\n    // e.g.  the card needs confirmation is '5', the current card is '-'\n    //       1 3 # - 5 7\n    if (member.cards[cardIndex].content === '-' &&\n        cardIndex < member.cards.length - 1 &&\n        member.cards[cardIndex + 1].mark === this.me().cardWaitingForConfirm.mark\n      ) {\n      return true;\n    }\n    // if the card that needs confirmation is not the Joker, show placeholder if the previous card is Joker, and the card before this Joker is the card needs confirmation\n    // e.g.  the card needs confirmation is '3', the current card is '5'\n    //       1 3 - # 5 7\n    if (cardIndex > 1 &&\n        member.cards[cardIndex - 1].content === '-' &&\n        member.cards[cardIndex - 2].mark === this.me().cardWaitingForConfirm.mark\n      ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Show placeholder card at the last (outside of the loop)\n   * @param member member object\n   */\n  showPlaceholderAtLast(member: Member): boolean {\n    // show placeholder only in \"my card\" area\n    if (member.id !== this.p2p.getId()) {\n      return false;\n    }\n    // show placeholder only when I have card waiting for confirmation\n    if (!this.me().cardWaitingForConfirm) {\n      return false;\n    }\n    // if the card that needs confirmation is the Joker\n    // show placeholder at last only if the last card is not the Joker\n    if (this.me().cardWaitingForConfirm.content === '-') {\n      if (this.me().cardWaitingForConfirm.mark !== member.cards[member.cards.length - 1].mark) {\n        return true;\n      }\n      return false;\n    }\n    // if the card that needs confirmation is not the Joker,\n    // show placeholder at last only if the last card is Joker, and the previous card is the card needs confirmation\n    // e.g.  the card needs confirmation is '5', the last card is '-'\n    //       1 3 5 - #\n    if (member.cards[member.cards.length - 1].content === '-' &&\n        member.cards[member.cards.length - 2].mark === this.me().cardWaitingForConfirm.mark\n      ) {\n      return true;\n    }\n    return false;\n  }\n\n  /************************\n    Select Card from Deck\n  ************************/\n  /**\n   * You need to select a card from the card deck now\n   */\n  isSelectingCardFromDeck(): boolean {\n    return this.isMyTurn() && !this.gameData.currentTurn.newCard\n  }\n\n  /**\n   * When user select a card from the deck\n   * @param i Card index\n   */\n  selectCardFromDeck(i: number): void {\n    // don't need to do anything if it's not the proper time to do so\n    if (!this.isSelectingCardFromDeck()) {\n      return;\n    }\n    this.selectedCardFromDeckIndex = i;\n    this.selectedCardFromDeckConfirming = false;\n  }\n\n  /**\n   * When user confirmed the card from deck\n   */\n  cardFromDeckConfirmed(): void {\n    this.selectedCardFromDeckConfirming = true;\n    const color = this.selectedCardFromDeckIndex < this.gameData.deck.black.length ? 'black' : 'white';\n    this.selectedCardFromDeckIndex = null;\n    if (this.storage.isHost()) {\n      return this.getNewCardFromDeck(color);\n    }\n    this.p2p.send({\n      id: this.p2p.getId(),\n      selectCardFromDeck: color\n    });\n  }\n\n  /**\n   * (HOST ONLY)\n   * Get a new card from the deck\n   * @param color The color of the new card\n   */\n  getNewCardFromDeck(color: string): void {\n    this.gameData.currentTurn.newCard = color === 'black' ? this.gameData.deck.black.pop() : this.gameData.deck.white.pop();\n    if (!this.gameData.history) {\n      this.gameData.history = [];\n    }\n    this.gameData.history.push({\n      name: this.gameData.members[this.gameData.currentTurn.memberIndex].name,\n      cardMark: this.gameData.currentTurn.newCard.mark\n    });\n    this.p2p.send(this.gameData);\n  }\n\n  /************************\n    Guess Card from Others\n  ************************/\n  /**\n   * You need to select a card from another member and guess\n   */\n  isGuessingCard(): boolean {\n    return this.isMyTurn() && !!this.gameData.currentTurn.newCard && !this.gameData.currentTurn.waitingForConfirmation;\n  }\n\n  /**\n   * If current user is waiting for response from host\n   */\n  isWaitingForResponse(): boolean {\n    return this.isMyTurn() && this.gameData.currentTurn.waitingForResponse;\n  }\n\n  /**\n   * User is guessing a card of this member\n   * @param  member The member object\n   */\n  isGuessingCardOfMember(member: Member): boolean {\n    return this.isGuessingCard() && !!member.cards.find(c => c.mark === this.guessCardMark);\n  }\n\n  /**\n   * When user select a card from other people for guessing\n   * @param card The card object\n   */\n  selectCardForGuessing(card: Card): void {\n    if (!this.isGuessingCard() || card.opened || this.isWaitingForResponse()) {\n      return;\n    }\n    this.guessCardMark = card.mark;console.log(this.gameData);\n  }\n\n  /**\n   * When user confirmed on the guessing of card\n   */\n  guessConfirmed(): void {\n    if (!this.isGuessingCard() || this.isWaitingForResponse() || !this.guessCardMark || this.guessAs === null) {\n      return;\n    }\n    this.gameData.currentTurn.waitingForResponse = true;\n    if (this.storage.isHost()) {\n      this.checkGuessResult(this.guessCardMark, this.guessAs);\n    } else {\n      this.p2p.send({\n        id: this.p2p.getId(),\n        guessCardMark: this.guessCardMark,\n        guessAs: this.guessAs\n      });\n    }\n    this.guessCardMark = null;\n    this.guessAs = null;\n  }\n\n  /**\n   * (HOST ONLY)\n   * Check the result of a guess\n   * @param guessCardMark The mark of card being guessed\n   * @param guessAs       Guess the card as\n   */\n  checkGuessResult(guessCardMark: string, guessAs: string | number): void {\n    const cardResult = this.findCardByMark(guessCardMark);console.log(cardResult);\n    if (!cardResult) {\n      return;\n    }\n    this.gameData.history.push({\n      name: this.gameData.members[this.gameData.currentTurn.memberIndex].name,\n      cardMark: guessCardMark,\n      guessAs: guessAs,\n      result: cardResult.card.content === guessAs\n    });\n    this.gameData.currentTurn.waitingForResponse = false;\n    if (cardResult.card.content === guessAs) {\n      // guess correctly\n      this.gameData.members[cardResult.memberIndex].cards[cardResult.cardIndex].opened = true;\n      this.gameData.currentTurn.guessCorrectly = true;\n      // check if game ends\n      let gameEnds = true;\n      this.gameData.members.forEach((m, i) => {\n        if (i !== this.gameData.currentTurn.memberIndex && m.cards.find(c => !c.opened)) {\n          gameEnds = false;\n        }\n      });\n      this.gameData.currentTurn.gameEnds = gameEnds;\n      this.p2p.send(this.gameData);\n    } else {\n      // guess wrong\n      this.gameData.currentTurn.guessCorrectly = false;\n      this.gameData.currentTurn.newCard.opened = true;\n      this.putNewCardToHand();\n      this.nextTurn();\n    }\n  }\n\n  /**\n   * Find a card of member with the given mark\n   * @param mark The mark of the card\n   */\n  findCardByMark(mark: string): { memberIndex: number; cardIndex: number; card: Card; } {\n    for (let i = 0; i < this.gameData.members.length; i++) {\n      const member = this.gameData.members[i];\n      const cardIndex = member.cards.findIndex(c => c.mark === mark);\n      if (cardIndex > -1) {\n        return {\n          memberIndex: i,\n          cardIndex: cardIndex,\n          card: member.cards[cardIndex]\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * User skip this turn and pass to the next turn\n   */\n  skipTurn(): void {\n    if (this.storage.isHost()) {\n      this.memberSkipTurn();\n    } else {\n      this.p2p.send({\n        id: this.p2p.getId(),\n        skipTurn: true\n      });\n    }\n  }\n\n  /**\n   * (HOST ONLY)\n   * Put the new card to member's hand and go to the next turn\n   */\n  memberSkipTurn(): void {\n    const result = this.insertNewCard(this.gameData.members[this.gameData.currentTurn.memberIndex].cards, this.gameData.currentTurn.newCard);\n    this.gameData.members[this.gameData.currentTurn.memberIndex].cards = result.cards;\n    if (!result.orderFixed) {\n      // need to wait for new card's position\n      this.gameData.members[this.gameData.currentTurn.memberIndex].cardWaitingForConfirm = this.gameData.currentTurn.newCard;\n      this.p2p.send(this.gameData);\n    } else {\n      this.nextTurn();\n    }\n  }\n\n  /**\n   * Insert the new card into the card array\n   * If the new card is next to the Joker(or it is the Joker), need to confirm the position of the new card\n   * @param cards   Card array\n   * @param newCard New card object\n   */\n  insertNewCard(cards: Card[], newCard: Card): { cards: Card[]; orderFixed: boolean; } {\n    // order is not fixed if the new card is Joker\n    if (newCard.content === '-') {\n      cards.push(newCard);\n      return {\n        cards: cards,\n        orderFixed: false\n      };\n    }\n    let orderFixed = true;\n    let cardInserted = false;\n    for (let i = 0; i < cards.length; i++) {\n      if (cards[i].content === '-') {\n        continue;\n      }\n      // insert the new card if it sits in between\n      if (newCard.content < cards[i].content || (newCard.content === cards[i].content && newCard.color === 'black')) {\n        cards.splice(i, 0, newCard);\n        cardInserted = true;\n        if (i !== 0 && cards[i - 1].content === '-') {\n          orderFixed = false;\n        }\n        break;\n      }\n    }\n    // push the new card if it is the largest\n    if (!cardInserted) {\n      if (cards[cards.length - 1].content === '-') {\n        orderFixed = false;\n      }\n      cards.push(newCard);\n    }\n    return {\n      cards: cards,\n      orderFixed: orderFixed\n    };\n  }\n\n  /**\n   * Put the new card to the member's hand\n   */\n  putNewCardToHand(): void {\n    const cards = this.gameData.members[this.gameData.currentTurn.memberIndex].cards;\n    // push the new card to member's hand\n    cards.push(this.gameData.currentTurn.newCard);\n    // sort the member's cards\n    this.gameData.members[this.gameData.currentTurn.memberIndex].cards = cards.sort(this.sortCards);\n  }\n\n\n\n\n\n  // This is used only for testing\n  next() {\n    let data;\n    if (!this.utils.has(this.gameData.members[1], 'cards')) {\n      data = {id: this.gameData.members[1].id, cards: [1,2,6,7], prepared: true};\n      return this.utils.broadcastEvent('game-data', data);\n    }\n    if (!this.utils.has(this.gameData.members[2], 'cards')) {\n      data = {id: this.gameData.members[2].id, cards: [1,2,6,7], prepared: true};\n      return this.utils.broadcastEvent('game-data', data);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DavinciCodeComponent } from '../davinci-code/davinci-code.component';\nimport { RoomComponent } from '../room/room.component';\n\nconst routes: Routes = [\n  {\n    path: 'room/:game',\n    component: RoomComponent\n  },\n  {\n    path: 'davinci_code',\n    component: DavinciCodeComponent\n  },\n  {\n    path: '',\n    redirectTo: '/home',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GameRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '@shared/shared.module';\nimport { GameRoutingModule } from './game-routing.module';\nimport { DavinciCodeComponent } from '../davinci-code/davinci-code.component';\nimport { DavinciCodeCardComponent } from '../davinci-code/davinci-code-card/davinci-code-card.component';\nimport { RoomComponent } from '../room/room.component';\n\n@NgModule({\n  declarations: [\n    DavinciCodeComponent,\n    DavinciCodeCardComponent,\n    RoomComponent\n  ],\n  imports: [\n    SharedModule,\n    GameRoutingModule\n  ]\n})\nexport class GameModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Jvb20vcm9vbS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilsService} from '@services/utils.service';\nimport { StorageService } from '@services/storage.service';\nimport { P2PService } from '@services/p2p.service';\n\n@Component({\n  selector: 'app-room',\n  templateUrl: './room.component.html',\n  styleUrls: ['./room.component.scss']\n})\nexport class RoomComponent implements OnInit {\n  // current game\n  game: string;\n  // how many people needed in a game\n  games = {\n    davinci_code: {\n      name: 'Davinci Code',\n      min: 2,\n      max: 4\n    }\n  };\n  name: string;\n  // room members list\n  roomMembers: string[] = [];\n  // the room number to join\n  roomId: string;\n  joiningRoom: boolean;\n\n  constructor(\n    public utils: UtilsService,\n    public storage: StorageService,\n    private route: ActivatedRoute,\n    public p2p: P2PService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.game = this.route.snapshot.paramMap.get('game');\n    this.p2p.init();\n    this.storage.setGameData({});\n    if (this.storage.get('name')) {\n      this.roomMembers = [this.storage.get('name')];\n    }\n    this.utils.getEvent('game-data').subscribe(res => {\n      // host user receive the data that a new user has joined this room\n      if (this.utils.has(res, 'newUser') && res.newUser && this.storage.isHost()) {\n        this.roomMembers.push(res.name);\n        const gameData = this.storage.getGameData();\n        // initialise the host info if not set yet\n        if (!this.utils.has(gameData, 'members')) {\n          gameData.members = [{\n            id: this.p2p.getId(),\n            name: this.storage.get('name')\n          }];\n        }\n        // add this new user to members\n        gameData.members.push({\n          id: res.id,\n          name: res.name\n        });\n        // save game data in local storage\n        this.storage.setGameData(gameData);\n        // connect to this new peer\n        this.p2p.connect(res.id);\n        // send the info to the new user\n        this.p2p.send(gameData, true);\n        // broadcast the latest info to all users\n        this.p2p.send(gameData);\n      }\n\n      // room member user receive the data to update members\n      if (this.utils.has(res, 'members')) {\n        this.roomMembers = res.members.map(member => member.name);\n        // save game data in local storage (only need to know how many members are in the room)\n        this.storage.setGameData({members: res.members});\n      }\n\n      // room member user receive the data to start the game\n      if (this.utils.has(res, 'startGame') && res.startGame) {\n        this.router.navigate([res.game]);\n      }\n    });\n  }\n\n  saveName() {\n    if (!this.name) {\n      return;\n    }\n    this.storage.set('name', this.name);\n    this.roomMembers = [this.name];\n  }\n\n  back() {\n    this.router.navigate(['']);\n  }\n\n  /**\n   * Only for people who are not host\n   * Join a room with room id\n   */\n  join() {\n    if (!this.roomId) {\n      return;\n    }\n    this.p2p.connect(this.roomId);\n    this.p2p.send(\n      {\n        newUser: true,\n        id: this.p2p.getId(),\n        name: this.storage.get('name')\n      },\n      true\n    );\n    this.joiningRoom = true;\n  }\n\n  /**\n   * Only for host people\n   * Start the game\n   */\n  start() {\n    // tell room member to start the game\n    this.p2p.send({\n      startGame: true,\n      game: this.game\n    });\n    // go the game route\n    this.router.navigate([this.game]);\n  }\n\n}\n"],"sourceRoot":"webpack:///"}