{"version":3,"sources":["src/app/davinci-code/davinci-code-card/davinci-code-card.component.html","src/app/davinci-code/davinci-code.component.html","src/app/room/room.component.html","src/app/davinci-code/davinci-code-card/davinci-code-card.component.scss","src/app/davinci-code/davinci-code-card/davinci-code-card.component.ts","src/app/davinci-code/davinci-code.component.scss","src/app/davinci-code/davinci-code.component.ts","src/app/game/game-routing.module.ts","src/app/game/game.module.ts","src/app/room/room.component.scss","src/app/room/room.component.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"text-center\\\">\\n  <div *ngIf=\\\"!placeholder\\\" class=\\\"card mb-1\\\" [ngClass]=\\\"{'selected': selected, 'black': color === 'black'}\\\">{{ content }}</div>\\n  <div *ngIf=\\\"placeholder\\\" class=\\\"card mb-1 placeholder\\\" [ngClass]=\\\"{'selected': selected}\\\">{{ content }}</div>\\n  <p>{{ mark }}<ng-container *ngIf=\\\"opened\\\"><fa-icon icon=\\\"eye\\\" class=\\\"text-info ml-1\\\"></fa-icon></ng-container></p>\\n</div>\"","export default \"<div *ngIf=\\\"!isPrepared\\\" class=\\\"text-center\\\">\\n  <h2 class=\\\"mt-3 mb-5\\\">{{ utils.lang('Pick') }} {{ initCardCount() }} {{ utils.lang('cards') }}</h2>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div *ngFor=\\\"let n of [1,2,3,4]\\\" class=\\\"col-3\\\">\\n        <app-davinci-code-card\\n          color=\\\"black\\\"\\n          [selected]=\\\"initialCards.includes(n)\\\"\\n          (click)=\\\"selectInitialCard(n)\\\"\\n          ></app-davinci-code-card>\\n      </div>\\n    </div>\\n    <div class=\\\"row my-5\\\">\\n      <div *ngFor=\\\"let n of [5,6,7,8]\\\" class=\\\"col-3\\\">\\n        <app-davinci-code-card\\n          color=\\\"white\\\"\\n          [selected]=\\\"initialCards.includes(n)\\\"\\n          (click)=\\\"selectInitialCard(n)\\\"\\n          ></app-davinci-code-card>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <button class=\\\"btn btn-primary\\\" [disabled]=\\\"initialCards.length !== initCardCount()\\\" (click)=\\\"prepared()\\\">{{ utils.lang('OK') }}</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<ng-container *ngIf=\\\"isPrepared\\\">\\n  <div class=\\\"text-center\\\">\\n    <h2 class=\\\"mt-3\\\">\\n      <ng-container *ngIf=\\\"isMyTurn()\\\">\\n        <ng-container *ngIf=\\\"!gameData.currentTurn.gameEnds\\\">{{ utils.lang('My Turn') }}!</ng-container>\\n        <ng-container *ngIf=\\\"gameData.currentTurn.gameEnds\\\">{{ utils.lang('I Win') }}!</ng-container>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"!isMyTurn()\\\">\\n        <ng-container *ngIf=\\\"!gameData.currentTurn.gameEnds\\\">{{ utils.lang('Waiting For Others') }} <fa-icon icon=\\\"cog\\\" spin=\\\"true\\\"></fa-icon></ng-container>\\n        <ng-container *ngIf=\\\"gameData.currentTurn.gameEnds\\\">{{ utils.lang('Game Over') }}!</ng-container></ng-container>\\n    </h2>\\n    <p *ngIf=\\\"instruction()\\\" class=\\\"text-primary\\\">* {{ instruction() }}</p>\\n  </div>\\n\\n  <div *ngFor=\\\"let member of gameData.members\\\" class=\\\"px-3 pb-2\\\">\\n    <div class=\\\"container card p-2\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <fa-icon icon=\\\"user-alt\\\" class=\\\"text-info mr-2\\\"></fa-icon>\\n          <span *ngIf=\\\"member.id !== p2p.getId()\\\">{{ member.name }}</span>\\n          <ng-container *ngIf=\\\"member.id === p2p.getId()\\\">\\n            <span>{{ utils.lang('My Cards') }}</span>\\n            <app-davinci-code-card\\n              *ngIf=\\\"isGuessingCard()\\\"\\n              [color]=\\\"gameData.currentTurn.newCard.color\\\"\\n              [mark]=\\\"gameData.currentTurn.newCard.mark\\\"\\n              [content]=\\\"gameData.currentTurn.newCard.content\\\"\\n              ></app-davinci-code-card>\\n            <button *ngIf=\\\"gameData.currentTurn.guessCorrectly &&\\n              isMyTurn() &&\\n              !gameData.currentTurn.gameEnds &&\\n              !me().cardWaitingForConfirm\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"skipTurn()\\\">{{ utils.lang('Pass this turn') }}</button>\\n          </ng-container>\\n        </div>\\n      </div>\\n\\n      <div *ngIf=\\\"member.cards && (member.id === p2p.getId() || !member.cardWaitingForConfirm)\\\" class=\\\"row row-cards mt-2 px-2\\\">\\n        <ng-container *ngFor=\\\"let card of member.cards; let i = index\\\">\\n          <div *ngIf=\\\"showPlaceholderBeforeCard(member, i)\\\" class=\\\"col-2\\\">\\n            <app-davinci-code-card placeholder=true (click)=\\\"reorderCardToIndex(i)\\\"></app-davinci-code-card>\\n          </div>\\n          <div class=\\\"col-2\\\">\\n            <app-davinci-code-card\\n              [color]=\\\"card.color\\\"\\n              [mark]=\\\"card.mark\\\"\\n              [content]=\\\"member.id === p2p.getId() || card.opened ? card.content : ''\\\"\\n              [opened]=\\\"card.opened\\\"\\n              (click)=\\\"member.id !== p2p.getId() ? selectCardForGuessing(card) : null\\\"\\n              [selected]=\\\"guessCardMark === card.mark\\\"\\n              ></app-davinci-code-card>\\n          </div>\\n        </ng-container>\\n        <div *ngIf=\\\"showPlaceholderAtLast(member)\\\" class=\\\"col-2\\\">\\n          <app-davinci-code-card placeholder=true (click)=\\\"reorderCardToIndex(member.cards.length)\\\"></app-davinci-code-card>\\n        </div>\\n      </div>\\n\\n      <ng-container *ngIf=\\\"isGuessingCardOfMember(member)\\\">\\n        <div class=\\\"row row-cards px-2\\\">\\n          <div *ngFor=\\\"let content of CARDS\\\" class=\\\"col-2\\\">\\n            <app-davinci-code-card\\n              placeholder=true\\n              [content]=\\\"content\\\"\\n              (click)=\\\"!isWaitingForResponse() ? guessAs = content : null\\\"\\n              [selected]=\\\"guessAs === content\\\"\\n              ></app-davinci-code-card>\\n          </div>\\n        </div>\\n        <div class=\\\"row text-center\\\">\\n          <div class=\\\"col-12\\\">\\n            <button class=\\\"btn btn-primary\\\" [disabled]=\\\"[undefined, null].includes(guessAs) || isWaitingForResponse()\\\" (click)=\\\"guessConfirmed()\\\">{{ utils.lang('OK') }}</button>\\n          </div>\\n        </div>\\n      </ng-container>\\n\\n      <div *ngIf=\\\"member.id === p2p.getId() && member.cardWaitingForConfirm\\\" class=\\\"row text-center\\\">\\n        <div class=\\\"col-12\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"cardConfirmed()\\\">{{ utils.lang('OK') }}</button>\\n        </div>\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n  <div class=\\\"px-3 pb-2\\\">\\n    <div class=\\\"container card p-2\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <fa-icon icon=\\\"th-large\\\" class=\\\"text-info mr-2\\\"></fa-icon>\\n          {{ utils.lang('Card Deck') }}\\n        </div>\\n      </div>\\n      <div class=\\\"row row-cards my-3 px-2\\\">\\n        <div *ngFor=\\\"let card of gameData.deck.black; let i = index\\\" class=\\\"col-2\\\">\\n          <app-davinci-code-card\\n            [color]=\\\"card.color\\\"\\n            [selected]=\\\"selectedCardFromDeckIndex === i\\\"\\n            (click)=\\\"selectCardFromDeck(i)\\\"\\n            ></app-davinci-code-card>\\n        </div>\\n        <div *ngFor=\\\"let card of gameData.deck.white; let i = index\\\" class=\\\"col-2\\\">\\n          <app-davinci-code-card\\n            [color]=\\\"card.color\\\"\\n            [selected]=\\\"selectedCardFromDeckIndex === i + gameData.deck.black.length\\\"\\n            (click)=\\\"selectCardFromDeck(i + gameData.deck.black.length)\\\"\\n            ></app-davinci-code-card>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"isSelectingCardFromDeck()\\\" class=\\\"row text-center\\\">\\n        <div class=\\\"col-12\\\">\\n          <button class=\\\"btn btn-primary\\\" [disabled]=\\\"selectedCardFromDeckIndex === null || selectedCardFromDeckConfirming\\\" (click)=\\\"cardFromDeckConfirmed()\\\">{{ utils.lang('OK') }}</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"p-3\\\">\\n    <div class=\\\"card p-2\\\">\\n      <b>{{ utils.lang('History') }}</b>\\n      <p *ngFor=\\\"let record of gameData.history; let i = index\\\">\\n        <ng-container *ngIf=\\\"record.guessAs === undefined\\\">\\n          <hr>\\n          {{ record.name }} {{ utils.lang('get card') }}\\n          <span class=\\\"text-info\\\">{{ record.cardMark }}</span>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"record.guessAs !== undefined\\\">\\n          {{ record.name }} {{ utils.lang('guess card') }}\\n          <span class=\\\"text-info\\\">{{ record.cardMark }}</span>\\n          {{ utils.lang('as') }}\\n          <span class=\\\"text-info\\\">{{ record.guessAs }}</span>\\n          <fa-icon *ngIf=\\\"record.result\\\" icon=\\\"check\\\" class=\\\"text-success ml-2\\\"></fa-icon>\\n          <fa-icon *ngIf=\\\"!record.result\\\" icon=\\\"times\\\" class=\\\"text-danger ml-2\\\"></fa-icon>\\n        </ng-container>\\n      </p>\\n    </div>\\n  </div>\\n\\n</ng-container>\\n<div class=\\\"text-center mt-4\\\">\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"next()\\\">下一步</button>\\n</div>\\n\\n\\n\"","export default \"<div class=\\\"m-3\\\">\\n  <button class=\\\"border-0 bg-transparent text-primary\\\" (click)=\\\"back()\\\"><fa-icon icon=\\\"arrow-left\\\"></fa-icon></button>\\n  <h2 class=\\\"text-center\\\">{{ utils.lang(games[game].name) }}</h2>\\n</div>\\n\\n<div class=\\\"container text-center mt-3\\\">\\n\\n  <ng-container *ngIf=\\\"!storage.get('name')\\\">\\n    <label>{{ utils.lang('Nick Name') }}:</label>\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"name\\\" class=\\\"mx-2\\\">\\n    <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"saveName()\\\">{{ utils.lang('OK') }}</button>\\n  </ng-container>\\n\\n  <ng-container *ngIf=\\\"storage.get('name')\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12 mb-3\\\">\\n        {{ utils.lang('Hello') }}<button class=\\\"btn btn-link\\\" (click)=\\\"storage.remove('name')\\\">{{ storage.get('name') }}</button>\\n      </div>\\n      <div class=\\\"col-6 text-right\\\">\\n        <button class=\\\"btn btn-lg\\\" [ngClass]=\\\"{'btn-outline-primary': !storage.isHost(), 'btn-primary': storage.isHost()}\\\" (click)=\\\"storage.isHost(true)\\\">{{ utils.lang('Create Room') }}</button>\\n      </div>\\n      <div class=\\\"col-6 text-left\\\">\\n        <button class=\\\"btn btn-lg\\\" [ngClass]=\\\"{'btn-outline-primary': storage.isHost(), 'btn-primary': !storage.isHost()}\\\" (click)=\\\"storage.isHost(false)\\\">{{ utils.lang('Join Room') }}</button>\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\\"storage.isHost()\\\" class=\\\"row mt-3\\\">\\n      <div class=\\\"col-12 text-left\\\">\\n        <p>{{ utils.lang('My Room Id') }}: <span class=\\\"text-info\\\">{{ p2p.getId() }}</span></p>\\n        <p>{{ utils.lang('People In The Room') }}: ({{ games[game].min }} - {{ games[game].max }} {{ utils.lang('people') }})</p>\\n        <ul class=\\\"list-group mt-2\\\">\\n          <li *ngFor=\\\"let member of roomMembers\\\" class=\\\"list-group-item\\\"><fa-icon icon=\\\"user-alt\\\" class=\\\"text-info mr-2\\\"></fa-icon>{{ member }}</li>\\n        </ul>\\n      </div>\\n      <div class=\\\"col-12 text-center mt-2\\\">\\n        <button class=\\\"btn btn-success\\\" [disabled]=\\\"roomMembers.length < games[game].min || roomMembers.length > games[game].max\\\" (click)=\\\"start()\\\">{{ utils.lang('Start Game') }}</button>\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\\"!storage.isHost()\\\" class=\\\"row mt-3\\\">\\n      <div *ngIf=\\\"roomMembers.length <= 1\\\" class=\\\"col-12\\\">\\n        <label>{{ utils.lang('Room Number') }}:</label>\\n        <input type=\\\"text\\\" [(ngModel)]=\\\"roomId\\\" class=\\\"mx-2\\\" style=\\\"width: 150px\\\">\\n        <button class=\\\"btn btn-success btn-sm\\\" [disabled]=\\\"joiningRoom\\\" (click)=\\\"join()\\\">{{ utils.lang('Join') }}</button>\\n      </div>\\n      <div *ngIf=\\\"roomMembers.length > 1\\\" class=\\\"col-12 text-left\\\">\\n        <p>{{ utils.lang('People In The Room') }}: ({{ games[game].min }} - {{ games[game].max }} {{ utils.lang('people') }})</p>\\n        <ul class=\\\"list-group mt-2\\\">\\n          <li *ngFor=\\\"let member of roomMembers\\\" class=\\\"list-group-item\\\"><fa-icon icon=\\\"user-alt\\\" class=\\\"text-info mr-2\\\"></fa-icon>{{ member }}</li>\\n        </ul>\\n      </div>\\n    </div>\\n\\n  </ng-container>\\n\\n</div>\\n\"","export default \".card {\\n  width: 40px;\\n  height: 50px;\\n  font-size: 25px;\\n  margin: auto;\\n  border-width: 3px;\\n  color: black;\\n  background: white;\\n}\\n\\n.placeholder {\\n  border: 2px dashed var(--orange);\\n}\\n\\n.black {\\n  color: white;\\n  background: black;\\n}\\n\\n.selected {\\n  -webkit-transform: scale(1.3);\\n          transform: scale(1.3);\\n}\\n\\np {\\n  margin-bottom: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaGF3bi9XZWJzaXRlcy9nYW1lL3NyYy9hcHAvZGF2aW5jaS1jb2RlL2RhdmluY2ktY29kZS1jYXJkL2RhdmluY2ktY29kZS1jYXJkLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9kYXZpbmNpLWNvZGUvZGF2aW5jaS1jb2RlLWNhcmQvZGF2aW5jaS1jb2RlLWNhcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7QUNDRjs7QURDQTtFQUNFLGdDQUFBO0FDRUY7O0FEQUE7RUFDRSxZQUFBO0VBQ0EsaUJBQUE7QUNHRjs7QUREQTtFQUNFLDZCQUFBO1VBQUEscUJBQUE7QUNJRjs7QURGQTtFQUNFLGdCQUFBO0FDS0YiLCJmaWxlIjoic3JjL2FwcC9kYXZpbmNpLWNvZGUvZGF2aW5jaS1jb2RlLWNhcmQvZGF2aW5jaS1jb2RlLWNhcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZCB7XG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDUwcHg7XG4gIGZvbnQtc2l6ZTogMjVweDtcbiAgbWFyZ2luOiBhdXRvO1xuICBib3JkZXItd2lkdGg6IDNweDtcbiAgY29sb3I6IGJsYWNrO1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbn1cbi5wbGFjZWhvbGRlciB7XG4gIGJvcmRlcjogMnB4IGRhc2hlZCB2YXIoLS1vcmFuZ2UpO1xufVxuLmJsYWNrIHtcbiAgY29sb3I6IHdoaXRlO1xuICBiYWNrZ3JvdW5kOiBibGFjaztcbn1cbi5zZWxlY3RlZCB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMS4zKTtcbn1cbnAge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufSIsIi5jYXJkIHtcbiAgd2lkdGg6IDQwcHg7XG4gIGhlaWdodDogNTBweDtcbiAgZm9udC1zaXplOiAyNXB4O1xuICBtYXJnaW46IGF1dG87XG4gIGJvcmRlci13aWR0aDogM3B4O1xuICBjb2xvcjogYmxhY2s7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xufVxuXG4ucGxhY2Vob2xkZXIge1xuICBib3JkZXI6IDJweCBkYXNoZWQgdmFyKC0tb3JhbmdlKTtcbn1cblxuLmJsYWNrIHtcbiAgY29sb3I6IHdoaXRlO1xuICBiYWNrZ3JvdW5kOiBibGFjaztcbn1cblxuLnNlbGVjdGVkIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xufVxuXG5wIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn0iXX0= */\"","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-davinci-code-card',\n  templateUrl: './davinci-code-card.component.html',\n  styleUrls: ['./davinci-code-card.component.scss']\n})\nexport class DavinciCodeCardComponent {\n  @Input() color = 'white';\n  @Input() content: string;\n  @Input() mark: string;\n  @Input() selected: boolean;\n  @Input() opened: boolean;\n  @Input() placeholder: boolean;\n\n  constructor() { }\n\n}\n","export default \".row-cards .col-2 {\\n  padding: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaGF3bi9XZWJzaXRlcy9nYW1lL3NyYy9hcHAvZGF2aW5jaS1jb2RlL2RhdmluY2ktY29kZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvZGF2aW5jaS1jb2RlL2RhdmluY2ktY29kZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQUNFLFlBQUE7QUNBSiIsImZpbGUiOiJzcmMvYXBwL2RhdmluY2ktY29kZS9kYXZpbmNpLWNvZGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucm93LWNhcmRzIHtcbiAgLmNvbC0yIHtcbiAgICBwYWRkaW5nOiA1cHg7XG4gIH1cbn0iLCIucm93LWNhcmRzIC5jb2wtMiB7XG4gIHBhZGRpbmc6IDVweDtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilsService} from '@services/utils.service';\nimport { StorageService } from '@services/storage.service';\nimport { P2PService } from '@services/p2p.service';\n\ninterface GameData {\n  members: Member[];\n  deck: {\n    black: Card[];\n    white: Card[];\n  }\n  currentTurn: {\n    memberIndex: number;\n    newCard: Card;\n    waitingForConfirmation: boolean;\n    guessCorrectly: boolean;\n    waitingForResponse: boolean;\n    gameEnds: boolean;\n  };\n  history: {\n    name: string;\n    cardMark: string;\n    guessAs?: string|number;\n    result?: boolean;\n  }[];\n}\n\ninterface Member {\n  id: string;\n  name: string;\n  cards: Card[];\n  cardWaitingForConfirm: Card;\n}\n\ninterface Card {\n  color: string;\n  mark: string;\n  content: string|number;\n  opened?: boolean;\n}\n\nconst MARKS = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'].reverse();\n\n@Component({\n  selector: 'app-davinci-code',\n  templateUrl: './davinci-code.component.html',\n  styleUrls: ['./davinci-code.component.scss']\n})\nexport class DavinciCodeComponent implements OnInit {\n  CARDS = [...Array(12).keys(), '-'];\n  // is the current user prepared to start\n  isPrepared = false;\n  initialCards = [];\n  gameData: GameData;\n  selectedCardFromDeckIndex: number = null;\n  selectedCardFromDeckConfirming: boolean;\n  guessCardMark: string;\n  guessAs: number | string = null;\n\n  constructor(\n    public utils: UtilsService,\n    public storage: StorageService,\n    private route: ActivatedRoute,\n    public p2p: P2PService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    if (this.storage.isHost()) {\n      // initialise game data\n      this.gameData = this.storage.getGameData();\n      this.gameData.deck = {\n        // black: this.utils.shuffle(this.CARDS).map((card, i) => {\n          black: this.CARDS.map((card, i) => {\n          return {\n            color: 'black',\n            content: card,\n            mark: MARKS[i],\n            opened: false\n          };\n        }),\n        white: this.utils.shuffle(this.CARDS).map((card, i) => {\n          return {\n            color: 'white',\n            content: card,\n            mark: MARKS[i + 13],\n            opened: false\n          };\n        })\n      };\n      this.gameData.history = [];\n      this.gameData.currentTurn = {\n        memberIndex: null,\n        newCard: null,\n        waitingForConfirmation: false,\n        guessCorrectly: null,\n        waitingForResponse: false,\n        gameEnds: false\n      }\n    }\n    this.utils.getEvent('game-data').subscribe(res => {\n      // member receive game data from host\n      if (!this.storage.isHost()) {\n        this.gameData = res;\n        return;\n      }\n\n      // host received data showing that a member has selected initial cards\n      if (this.utils.has(res, 'prepared') && res.prepared) {\n        return this.memberPrepared(res.id, res.cards);\n      }\n\n      // host received data showing that a member has confirmed on the position of joker card\n      if (this.utils.has(res, 'cardConfirmed') && res.cardConfirmed) {\n        const memberIndex = this.gameData.members.findIndex(m => m.id === res.id);\n        this.gameData.members[memberIndex].cards = res.cards;\n        this.nextTurn();\n        return this.p2p.send(this.gameData);\n      }\n\n      // host received data showing that a member has selected a card from deck\n      if (this.utils.has(res, 'selectCardFromDeck')) {\n        // member can only select a card from deck on his turn\n        if (this.gameData.members[this.gameData.currentTurn.memberIndex].id !== res.id) {\n          return;\n        }\n        return this.getNewCardFromDeck(res.selectCardFromDeck);\n      }\n\n      // host received data showing that a member has guessed a card\n      if (this.utils.has(res, 'guessCardMark')) {\n        // member can only guess card on his turn\n        if (this.gameData.members[this.gameData.currentTurn.memberIndex].id !== res.id) {\n          return;\n        }\n        return this.checkGuessResult(res.guessCardMark, res.guessAs);\n      }\n\n      if (this.utils.has(res, 'skipTurn') && res.skipTurn) {\n        // member can only skip turn on his turn\n        if (this.gameData.members[this.gameData.currentTurn.memberIndex].id !== res.id) {\n          return;\n        }\n        return this.memberSkipTurn();\n      }\n    });\n  }\n\n  /************************\n    Preparation\n  ************************/\n  // how many initial cards should everyone has\n  initCardCount(): number {\n    if (this.utils.isEmpty(this.storage.getGameData())) {\n      this.router.navigate(['room', 'davinci_code']);\n      return 4;\n    }\n    return this.storage.getGameData().members.length === 4 ? 3 : 4;\n  }\n\n  // when user select initial card\n  selectInitialCard(n): void {\n    if (this.initialCards.length === this.initCardCount() && !this.initialCards.includes(n)) {\n      return;\n    }\n    this.initialCards = this.utils.addOrRemove(this.initialCards, n);\n  }\n\n  // when user has confirmed on initial cards selection\n  prepared(): void {\n    if (this.storage.isHost()) {\n      this.memberPrepared(this.p2p.getId(), this.initialCards);\n    } else {\n      // send data to the host\n      this.p2p.send({\n        id: this.p2p.getId(),\n        prepared: true,\n        cards: this.initialCards\n      });\n    }\n    this.isPrepared = true;\n  }\n\n  /**\n   * (HOST ONLY)\n   * when host received data that a member has selected initial cards\n   * @param id    Member's id\n   * @param cards Card array in numbers (1 - 4 means black, 5 - 8 means white)\n   */\n  memberPrepared(id: string, cards: number[]): void {\n    // find the member\n    const memberIndex = this.gameData.members.findIndex(m => m.id === id);\n    const member = this.gameData.members[memberIndex];\n    member.cards = [];\n    member.cardWaitingForConfirm = null;\n    cards.forEach(initCard => {\n      let card = initCard < 5 ? this.gameData.deck.black.pop() : this.gameData.deck.white.pop();\n      // don't allow having two joker cards as initial card\n      if (member.cards.find(c => c.content === '-') && card.content === '-') {\n        const tmpCard = JSON.parse(JSON.stringify(card));\n        if (initCard < 5) {\n          card = this.gameData.deck.black.pop();\n          this.gameData.deck.black.push(tmpCard);\n        } else {\n          card = this.gameData.deck.white.pop();\n          this.gameData.deck.white.push(tmpCard);\n        }\n      }\n      card.opened = false;\n      member.cards.push(card);\n      if (card.content === '-') {\n        member.cardWaitingForConfirm = card;\n      }\n    });\n    // sort the cards\n    member.cards.sort(this.sortCards);\n    this.gameData.members[memberIndex] = member;\n    this.nextTurn();\n    this.p2p.send(this.gameData);\n  }\n\n  /**\n   * (HOST ONLY)\n   * Sort the cards in order of number.\n   * Black is smaller than white if number is the same.\n   * Leave the Joker unchanged\n   */\n  sortCards(a, b): number {\n    // Move the Joker card to left\n    if (a.content === '-') {\n      return -1;\n    }\n    if (b.content === '-') {\n      return 1;\n    }\n    if (a.content < b.content) {\n      return -1;\n    }\n    if (a.content > b.content) {\n      return 1;\n    }\n    return a.color === 'black' ? -1 : 1;\n  }\n\n  me(): Member {\n    return this.gameData.members.find(m => m.id === this.p2p.getId());\n  }\n\n  /**\n   * when user reordered the Joker card\n   * @param i Reorder the Joker card to this index position\n   */\n  reorderCardToIndex(i: number): void {\n    const myIndex = this.gameData.members.findIndex(m => m.id === this.p2p.getId());\n    const cards = this.gameData.members[myIndex].cards;\n    const jokerCardIndex = cards.findIndex(c => c.mark === this.me().cardWaitingForConfirm.mark);\n    if (jokerCardIndex < i) {\n      i --;\n    }\n    cards.splice(i, 0, cards.splice(jokerCardIndex, 1)[0]);\n  }\n\n  /**\n   * when user confirmed the position of the joker card\n   */\n  cardConfirmed(): void {\n    const myIndex = this.gameData.members.findIndex(m => m.id === this.p2p.getId());\n    this.gameData.members[myIndex].cardWaitingForConfirm = null;\n    if (this.storage.isHost()) {\n      this.nextTurn();\n      return this.p2p.send(this.gameData);\n    }\n    return this.p2p.send({\n      id: this.p2p.getId(),\n      cardConfirmed: true,\n      cards: this.gameData.members[myIndex].cards\n    });\n  }\n\n  /**\n   * (HOST ONLY)\n   * Check if it is ready to proceed to the next turn.\n   * If it is, find the member to do the next turn\n   */\n  nextTurn(): void {\n    // not ready for the next turn if not all members are prepared and confirmed on cards\n    if (this.gameData.members.find(m => !this.utils.has(m, 'cards') || m.cardWaitingForConfirm)) {\n      return;\n    }\n    do {\n      if (this.gameData.currentTurn.memberIndex === null || this.gameData.currentTurn.memberIndex === this.gameData.members.length - 1) {\n        this.gameData.currentTurn.memberIndex = 0;\n      } else {\n        this.gameData.currentTurn.memberIndex ++;\n      }\n      // skip member whose cards are all opened\n    } while (!this.gameData.members[this.gameData.currentTurn.memberIndex].cards.find(c => !c.opened));\n\n    this.newTurnInit();\n    this.p2p.send(this.gameData);\n  }\n\n  newTurnInit() {\n    this.gameData.currentTurn.newCard = null;\n    this.gameData.currentTurn.waitingForConfirmation = false;\n    this.gameData.currentTurn.guessCorrectly = null;\n  }\n\n  isMyTurn(): boolean {\n    if (!this.utils.has(this.gameData, 'currentTurn') || this.gameData.currentTurn.memberIndex === null) {\n      return false;\n    }\n    return this.gameData.members[this.gameData.currentTurn.memberIndex].id === this.p2p.getId();\n  }\n\n  instruction(): string {\n    if (this.me().cardWaitingForConfirm)  {\n      return this.utils.lang('Please adjust the position of \"-\" card');\n    }\n    if (this.isSelectingCardFromDeck()) {\n      return this.utils.lang('Please choose a card from the card deck');\n    }\n    if (this.isGuessingCard() && !this.gameData.currentTurn.gameEnds) {\n      let msg = this.utils.lang('Please choose a card from other people and guess');\n      if (this.gameData.currentTurn.guessCorrectly) {\n        msg += ', ' + this.utils.lang('or skip this turn');\n      }\n      return msg;\n    }\n    if (this.isWaitingForResponse()) {\n      return this.utils.lang('Please wait for the response of the system');\n    }\n    return '';\n  }\n\n  /**\n   * The following functions determine whether a placeholder card should be placed before the current card in the loop.\n   * The placeholder card is used when user need to confirm on the position of a card\n   *\n   * e.g.\n   * 1. When user need to put the Joker in hand, he need to confirm on the position of the Joker. So the cards looks like: (\"#\" is the placeholder)\n   *     # 1 # 3 - 5 # 7 #    or\n   *     # 1 - 3 # 5 # 7 #    or\n   *     - 1 # 3 # 5 # 7 #\n   *\n   * 2. When user need to put card 5 in hand, he need to confirm the position only if there's a Joker next to card 5. So the cards looks like: (\"#\" is the placeholder)\n   *     1 3 # - 5 7    or\n   *     1 3 5 - # 7\n   *\n   * @param member The member object in the loop\n   * @param cardIndex The card index in the loop\n   */\n  showPlaceholderBeforeCard(member: Member, cardIndex: number): boolean {\n    // show placeholder only in \"my card\" area\n    if (member.id !== this.p2p.getId()) {\n      return false;\n    }\n    // show placeholder only when I have card waiting for confirmation\n    if (!this.me().cardWaitingForConfirm) {\n      return false;\n    }\n    // don't need to show placeholder if the current card is the card that needs confirmation\n    if (member.cards[cardIndex].mark === this.me().cardWaitingForConfirm.mark) {\n      return false;\n    }\n    // don't need to show placeholder if the card that needs confirmation is just on the left of the current card\n    // e.g.  the card needs confirmation is '-', the current card is '3'\n    //       # 1 - 3 # 5 # 7 #\n    if (cardIndex !== 0 && member.cards[cardIndex - 1].mark === this.me().cardWaitingForConfirm.mark) {\n      return false;\n    }\n    // if the card that needs confirmation is the Joker, show placeholder everywhere\n    if (this.me().cardWaitingForConfirm.content === '-') {\n      return true;\n    }\n    // if the card that needs confirmation is not the Joker, show placeholder if the current card is Joker, and the next card is the card needs confirmation\n    // e.g.  the card needs confirmation is '5', the current card is '-'\n    //       1 3 # - 5 7\n    if (member.cards[cardIndex].content === '-' &&\n        cardIndex < member.cards.length - 1 &&\n        member.cards[cardIndex + 1].mark === this.me().cardWaitingForConfirm.mark\n      ) {\n      return true;\n    }\n    // if the card that needs confirmation is not the Joker, show placeholder if the previous card is Joker, and the card before this Joker is the card needs confirmation\n    // e.g.  the card needs confirmation is '3', the current card is '5'\n    //       1 3 - # 5 7\n    if (cardIndex > 1 &&\n        member.cards[cardIndex - 1].content === '-' &&\n        member.cards[cardIndex - 2].mark === this.me().cardWaitingForConfirm.mark\n      ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Show placeholder card at the last (outside of the loop)\n   * @param member member object\n   */\n  showPlaceholderAtLast(member: Member): boolean {\n    // show placeholder only in \"my card\" area\n    if (member.id !== this.p2p.getId()) {\n      return false;\n    }\n    // show placeholder only when I have card waiting for confirmation\n    if (!this.me().cardWaitingForConfirm) {\n      return false;\n    }\n    // if the card that needs confirmation is the Joker\n    // show placeholder at last only if the last card is not the Joker\n    if (this.me().cardWaitingForConfirm.content === '-') {\n      if (this.me().cardWaitingForConfirm.mark !== member.cards[member.cards.length - 1].mark) {\n        return true;\n      }\n      return false;\n    }\n    // if the card that needs confirmation is not the Joker,\n    // show placeholder at last only if the last card is Joker, and the previous card is the card needs confirmation\n    // e.g.  the card needs confirmation is '5', the last card is '-'\n    //       1 3 5 - #\n    if (member.cards[member.cards.length - 1].content === '-' &&\n        member.cards[member.cards.length - 2].mark === this.me().cardWaitingForConfirm.mark\n      ) {\n      return true;\n    }\n    return false;\n  }\n\n  /************************\n    Select Card from Deck\n  ************************/\n  /**\n   * You need to select a card from the card deck now\n   */\n  isSelectingCardFromDeck(): boolean {\n    return this.isMyTurn() && !this.gameData.currentTurn.newCard\n  }\n\n  /**\n   * When user select a card from the deck\n   * @param i Card index\n   */\n  selectCardFromDeck(i: number): void {\n    // don't need to do anything if it's not the proper time to do so\n    if (!this.isSelectingCardFromDeck()) {\n      return;\n    }\n    this.selectedCardFromDeckIndex = i;\n    this.selectedCardFromDeckConfirming = false;\n  }\n\n  /**\n   * When user confirmed the card from deck\n   */\n  cardFromDeckConfirmed(): void {\n    this.selectedCardFromDeckConfirming = true;\n    const color = this.selectedCardFromDeckIndex < this.gameData.deck.black.length ? 'black' : 'white';\n    this.selectedCardFromDeckIndex = null;\n    if (this.storage.isHost()) {\n      return this.getNewCardFromDeck(color);\n    }\n    this.p2p.send({\n      id: this.p2p.getId(),\n      selectCardFromDeck: color\n    });\n  }\n\n  /**\n   * (HOST ONLY)\n   * Get a new card from the deck\n   * @param color The color of the new card\n   */\n  getNewCardFromDeck(color: string): void {\n    this.gameData.currentTurn.newCard = color === 'black' ? this.gameData.deck.black.pop() : this.gameData.deck.white.pop();\n    if (!this.gameData.history) {\n      this.gameData.history = [];\n    }\n    this.gameData.history.push({\n      name: this.gameData.members[this.gameData.currentTurn.memberIndex].name,\n      cardMark: this.gameData.currentTurn.newCard.mark\n    });\n    this.p2p.send(this.gameData);\n  }\n\n  /************************\n    Guess Card from Others\n  ************************/\n  /**\n   * You need to select a card from another member and guess\n   */\n  isGuessingCard(): boolean {\n    return this.isMyTurn() && !!this.gameData.currentTurn.newCard && !this.gameData.currentTurn.waitingForConfirmation;\n  }\n\n  /**\n   * If current user is waiting for response from host\n   */\n  isWaitingForResponse(): boolean {\n    return this.isMyTurn() && this.gameData.currentTurn.waitingForResponse;\n  }\n\n  /**\n   * User is guessing a card of this member\n   * @param  member The member object\n   */\n  isGuessingCardOfMember(member: Member): boolean {\n    return this.isGuessingCard() && !!member.cards.find(c => c.mark === this.guessCardMark);\n  }\n\n  /**\n   * When user select a card from other people for guessing\n   * @param card The card object\n   */\n  selectCardForGuessing(card: Card): void {\n    if (!this.isGuessingCard() || card.opened || this.isWaitingForResponse()) {\n      return;\n    }\n    this.guessCardMark = card.mark;console.log(this.gameData);\n  }\n\n  /**\n   * When user confirmed on the guessing of card\n   */\n  guessConfirmed(): void {\n    if (!this.isGuessingCard() || this.isWaitingForResponse() || !this.guessCardMark || this.guessAs === null) {\n      return;\n    }\n    this.gameData.currentTurn.waitingForResponse = true;\n    if (this.storage.isHost()) {\n      this.checkGuessResult(this.guessCardMark, this.guessAs);\n    } else {\n      this.p2p.send({\n        id: this.p2p.getId(),\n        guessCardMark: this.guessCardMark,\n        guessAs: this.guessAs\n      });\n    }\n    this.guessCardMark = null;\n    this.guessAs = null;\n  }\n\n  /**\n   * (HOST ONLY)\n   * Check the result of a guess\n   * @param guessCardMark The mark of card being guessed\n   * @param guessAs       Guess the card as\n   */\n  checkGuessResult(guessCardMark: string, guessAs: string | number): void {\n    const cardResult = this.findCardByMark(guessCardMark);console.log(cardResult);\n    if (!cardResult) {\n      return;\n    }\n    this.gameData.history.push({\n      name: this.gameData.members[this.gameData.currentTurn.memberIndex].name,\n      cardMark: guessCardMark,\n      guessAs: guessAs,\n      result: cardResult.card.content === guessAs\n    });\n    this.gameData.currentTurn.waitingForResponse = false;\n    if (cardResult.card.content === guessAs) {\n      // guess correctly\n      this.gameData.members[cardResult.memberIndex].cards[cardResult.cardIndex].opened = true;\n      this.gameData.currentTurn.guessCorrectly = true;\n      // check if game ends\n      let gameEnds = true;\n      this.gameData.members.forEach((m, i) => {\n        if (i !== this.gameData.currentTurn.memberIndex && m.cards.find(c => !c.opened)) {\n          gameEnds = false;\n        }\n      });\n      this.gameData.currentTurn.gameEnds = gameEnds;\n      this.p2p.send(this.gameData);\n    } else {\n      // guess wrong\n      this.gameData.currentTurn.guessCorrectly = false;\n      this.gameData.currentTurn.newCard.opened = true;\n      this.putNewCardToHand();\n      this.nextTurn();\n    }\n  }\n\n  /**\n   * Find a card of member with the given mark\n   * @param mark The mark of the card\n   */\n  findCardByMark(mark: string): { memberIndex: number; cardIndex: number; card: Card; } {\n    for (let i = 0; i < this.gameData.members.length; i++) {\n      const member = this.gameData.members[i];\n      const cardIndex = member.cards.findIndex(c => c.mark === mark);\n      if (cardIndex > -1) {\n        return {\n          memberIndex: i,\n          cardIndex: cardIndex,\n          card: member.cards[cardIndex]\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * User skip this turn and pass to the next turn\n   */\n  skipTurn(): void {\n    if (this.storage.isHost()) {\n      this.memberSkipTurn();\n    } else {\n      this.p2p.send({\n        id: this.p2p.getId(),\n        skipTurn: true\n      });\n    }\n  }\n\n  /**\n   * (HOST ONLY)\n   * Put the new card to member's hand and go to the next turn\n   */\n  memberSkipTurn(): void {\n    const result = this.insertNewCard(this.gameData.members[this.gameData.currentTurn.memberIndex].cards, this.gameData.currentTurn.newCard);\n    this.gameData.members[this.gameData.currentTurn.memberIndex].cards = result.cards;\n    if (!result.orderFixed) {\n      // need to wait for new card's position\n      this.gameData.members[this.gameData.currentTurn.memberIndex].cardWaitingForConfirm = this.gameData.currentTurn.newCard;\n      this.p2p.send(this.gameData);\n    } else {\n      this.nextTurn();\n    }\n  }\n\n  /**\n   * Insert the new card into the card array\n   * If the new card is next to the Joker(or it is the Joker), need to confirm the position of the new card\n   * @param cards   Card array\n   * @param newCard New card object\n   */\n  insertNewCard(cards: Card[], newCard: Card): { cards: Card[]; orderFixed: boolean; } {\n    // order is not fixed if the new card is Joker\n    if (newCard.content === '-') {\n      cards.push(newCard);\n      return {\n        cards: cards,\n        orderFixed: false\n      };\n    }\n    let orderFixed = true;\n    let cardInserted = false;\n    for (let i = 0; i < cards.length; i++) {\n      if (cards[i].content === '-') {\n        continue;\n      }\n      // insert the new card if it sits in between\n      if (newCard.content < cards[i].content || (newCard.content === cards[i].content && newCard.color === 'black')) {\n        cards.splice(i, 0, newCard);\n        cardInserted = true;\n        if (i !== 0 && cards[i - 1].content === '-') {\n          orderFixed = false;\n        }\n        break;\n      }\n    }\n    // push the new card if it is the largest\n    if (!cardInserted) {\n      if (cards[cards.length - 1].content === '-') {\n        orderFixed = false;\n      }\n      cards.push(newCard);\n    }\n    return {\n      cards: cards,\n      orderFixed: orderFixed\n    };\n  }\n\n  /**\n   * Put the new card to the member's hand\n   */\n  putNewCardToHand(): void {\n    const cards = this.gameData.members[this.gameData.currentTurn.memberIndex].cards;\n    // push the new card to member's hand\n    cards.push(this.gameData.currentTurn.newCard);\n    // sort the member's cards\n    this.gameData.members[this.gameData.currentTurn.memberIndex].cards = cards.sort(this.sortCards);\n  }\n\n\n\n\n\n  // This is used only for testing\n  next() {\n    let data;\n    if (!this.utils.has(this.gameData.members[1], 'cards')) {\n      data = {id: this.gameData.members[1].id, cards: [1,2,6,7], prepared: true};\n      return this.utils.broadcastEvent('game-data', data);\n    }\n    if (!this.utils.has(this.gameData.members[2], 'cards')) {\n      data = {id: this.gameData.members[2].id, cards: [1,2,6,7], prepared: true};\n      return this.utils.broadcastEvent('game-data', data);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DavinciCodeComponent } from '../davinci-code/davinci-code.component';\nimport { RoomComponent } from '../room/room.component';\n\nconst routes: Routes = [\n  {\n    path: 'room/:game',\n    component: RoomComponent\n  },\n  {\n    path: 'davinci_code',\n    component: DavinciCodeComponent\n  },\n  {\n    path: '',\n    redirectTo: '/home',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GameRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '@shared/shared.module';\nimport { GameRoutingModule } from './game-routing.module';\nimport { DavinciCodeComponent } from '../davinci-code/davinci-code.component';\nimport { DavinciCodeCardComponent } from '../davinci-code/davinci-code-card/davinci-code-card.component';\nimport { RoomComponent } from '../room/room.component';\n\n@NgModule({\n  declarations: [\n    DavinciCodeComponent,\n    DavinciCodeCardComponent,\n    RoomComponent\n  ],\n  imports: [\n    SharedModule,\n    GameRoutingModule\n  ]\n})\nexport class GameModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Jvb20vcm9vbS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilsService} from '@services/utils.service';\nimport { StorageService } from '@services/storage.service';\nimport { P2PService } from '@services/p2p.service';\n\n@Component({\n  selector: 'app-room',\n  templateUrl: './room.component.html',\n  styleUrls: ['./room.component.scss']\n})\nexport class RoomComponent implements OnInit {\n  // current game\n  game: string;\n  // how many people needed in a game\n  games = {\n    davinci_code: {\n      name: 'Davinci Code',\n      min: 2,\n      max: 4\n    }\n  };\n  name: string;\n  // room members list\n  roomMembers: string[] = [];\n  // the room number to join\n  roomId: string;\n  joiningRoom: boolean;\n\n  constructor(\n    public utils: UtilsService,\n    public storage: StorageService,\n    private route: ActivatedRoute,\n    public p2p: P2PService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.game = this.route.snapshot.paramMap.get('game');\n    this.p2p.init();\n    this.storage.setGameData({});\n    if (this.storage.get('name')) {\n      this.roomMembers = [this.storage.get('name')];\n    }\n    this.utils.getEvent('game-data').subscribe(res => {\n      // host user receive the data that a new user has joined this room\n      if (this.utils.has(res, 'newUser') && res.newUser && this.storage.isHost()) {\n        this.roomMembers.push(res.name);\n        const gameData = this.storage.getGameData();\n        // initialise the host info if not set yet\n        if (!this.utils.has(gameData, 'members')) {\n          gameData.members = [{\n            id: this.p2p.getId(),\n            name: this.storage.get('name')\n          }];\n        }\n        // add this new user to members\n        gameData.members.push({\n          id: res.id,\n          name: res.name\n        });\n        // save game data in local storage\n        this.storage.setGameData(gameData);\n        // connect to this new peer\n        this.p2p.connect(res.id);\n        // send the info to the new user\n        this.p2p.send(gameData, true);\n        // broadcast the latest info to all users\n        this.p2p.send(gameData);\n      }\n\n      // room member user receive the data to update members\n      if (this.utils.has(res, 'members')) {\n        this.roomMembers = res.members.map(member => member.name);\n        // save game data in local storage (only need to know how many members are in the room)\n        this.storage.setGameData({members: res.members});\n      }\n\n      // room member user receive the data to start the game\n      if (this.utils.has(res, 'startGame') && res.startGame) {\n        this.router.navigate([res.game]);\n      }\n    });\n  }\n\n  saveName() {\n    if (!this.name) {\n      return;\n    }\n    this.storage.set('name', this.name);\n    this.roomMembers = [this.name];\n  }\n\n  back() {\n    this.router.navigate(['']);\n  }\n\n  /**\n   * Only for people who are not host\n   * Join a room with room id\n   */\n  join() {\n    if (!this.roomId) {\n      return;\n    }\n    this.p2p.connect(this.roomId);\n    this.p2p.send(\n      {\n        newUser: true,\n        id: this.p2p.getId(),\n        name: this.storage.get('name')\n      },\n      true\n    );\n    this.joiningRoom = true;\n  }\n\n  /**\n   * Only for host people\n   * Start the game\n   */\n  start() {\n    // tell room member to start the game\n    this.p2p.send({\n      startGame: true,\n      game: this.game\n    });\n    // go the game route\n    this.router.navigate([this.game]);\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"game-game-module-es5.js"}